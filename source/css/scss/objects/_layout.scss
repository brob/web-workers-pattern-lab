///* Table of Contents
//==================================================
//    #Base 950 Grid
//    #Tablet (Portrait)
//    #Mobile (Portrait)
//    #Mobile (Landscape)
//    #Clearing */
//
///* Font Sizes */
///* Set body to font-size of 100%. 1em equals 16px  to convert px to em use the formula (font px size / 16) = #.#####em  */
///* Set sizes in the responsive-site.css file*/
///* Change body font-size % in the responsive-site.css file, as this is most likely to change on a per site basis */

///* #Base 950 Grid
//== STRUCTURE: ========================
//    * Page width:            950 px
//    * Number of columns:     24
//    * Column width:          30 px
//    * Margin width:          10 px
//======================================
//
//   By default, the grid is 950px wide, with 24 columns
//   spanning 30px, and a 10px margin between columns.
//
//   If you need fewer or more columns, use this formula to calculate
//   the new total width:
//
//   $total-width: ($num-columns * $columns-width) + ($margin-width * ($num-columns - 1 ));
//*/


$total-width: ($num-columns * $columns-width) + ($margin-width * ($num-columns - 1 ));


.container {
  width: $total-width;
  position: relative;
  z-index:0;
  margin: 0 auto;
  padding: 0;
  width: $total-width;

}
.column, .columns {
  display: inline;
  float: left;
  margin: 0 $margin-width 0 0;
  // Nested Column Classes
  &.last { margin-right: 0; }
}

//base columns
@for $i from 1 through $num-columns {
  @if $i == 1 {
    .col#{$i}.columns, col#{$i}.column { width: (($columns-width * $i) + (($i - 1) * $margin-width)) ; }
  } @else {
    .col#{$i}.columns { width: (($columns-width * $i) + (($i - 1) * $margin-width)) ; }
  }
}

.row {
  @include clearfix();
  margin-bottom: 20px;
  // Lines for doing float right instead of left to allow for a varied breakpoint
  &.reverse {
    & > .column, & > .columns {
      float:right;
      &.first { margin-right: 0; }
      &.last { margin:0 $margin-width 0 0; }
    }
  }
} // End Row

//appends
@for $i from 1 through ($num-columns - 1) {
  .append-#{$i} { padding-right: $columns-width * $i + $margin-width * $i; }
}
//prepends
@for $i from 1 through ($num-columns - 1) {
  .prepend-#{$i} { padding-left: $columns-width * $i + $margin-width * $i; }
}
//pulls
@for $i from 1 through ($num-columns) {
  .pull-#{$i} { margin-left: -($columns-width * $i + $margin-width * $i); }
}

#{$mobile-nav-container} {
  display: none;
}


//  /* #Tablet (Portrait)
//  == STRUCTURE: ========================
//   * Page width:            760 px
//   * Number of columns:     24
//   * Column width:          24 px
//   * Margin width:          8 px
//  ======================================
//  By default, the grid is 760px wide, with 24 columns
//  spanning 24px, and a 8px margin between columns.
//  If you need fewer or more columns, use this formula to calculate
//  the new total width:
//
//  Total width = (number_of_columns * column_width) - margin_width
//  */
//  /* Note: Design for a width of 768px */
//  /* Max width is 949px + 15px for scroll bar width*/

$tablet-width: ($num-tablet-columns * $columns-tablet-width) + ($margin-tablet-width * ($num-tablet-columns - 1 ));

@include rf-mid-breaker($nav-break, $tablet-break) {

  .container {
    width: $tablet-width;
    .column, .columns {
      margin: 0 $margin-tablet-width 0 0;

      @for $i from 1 through $num-tablet-columns {
        @if $i == 1 {
          &.col#{$i}, &.col#{$i} & { width: ($columns-tablet-width * $i) + (($i - 1) * $margin-tablet-width );}
        } @else {
          &.col#{$i} { width: ($columns-tablet-width * $i) + (($i - 1) * $margin-tablet-width );}
        }
      }
    }
  }

  //Spans
  @for $i from 1 through $num-tablet-columns {
    .span-#{$i} { width: ($columns-tablet-width * $i) + (($i - 1) * $margin-tablet-width ); }
  }

  //Appends
  @for $i from 1 through ($num-tablet-columns - 1) {
    .append-#{$i} { padding-right: $columns-tablet-width * $i + $margin-tablet-width * $i;  }
  }

  //Prepends
  @for $i from 1 through ($num-tablet-columns - 1) {
    .prepend-#{$i} { padding-left: $columns-tablet-width * $i + $margin-tablet-width * $i;  }
  }

  //Pulls
  @for $i from 1 through ($num-tablet-columns) {
    .pull-#{$i} { margin-left: -($columns-tablet-width * $i + $margin-tablet-width * $i); }
  }

  //Reverse
  .row.reverse > .column.last 					{ margin:0 $margin-tablet-width 0 0}

}

@include rf-break-smaller($nav-break) {
  .container {
    width: $phone-portrait-width;
    &.columns, &.column, .columns, .column {
      margin: 0 0 $margin-phone-width 0;
      padding: 0;
    }
    [class*='col'] {
      &.column, &.columns {
        width: $phone-portrait-width;
      }
    }
  }

  .row {
    &.reverse {
      & > .colun.last & > coluns.last {
        margin: 0 ($margin-phone-width / 2) 0 0;
      }
    }
  }

  #{$mobile-nav-container} {
    display: block;
  }

  #{$main-nav} {
    display: none;
  }

}

@include rf-mid-breaker($phone-break, $nav-break) {
  .container {
    width: $phone-landscape-width;
    .column, .columns { margin: 0 0 $margin-phone-width 0; }
    [class*='col'] {
      &.column, &.columns {
        width: $phone-landscape-width;
      }
    }
  }

  #{$mobile-nav-container} {
    display: block;
  }

  #{$main-nav} {
    display: none;
  }

  .scale-width-grid {
    max-width: 100%;
    height: auto;
  }
  .scale-width-grid-full {
    width: 100%;
    height: auto;
  }
}
.right {
    float: right;
}
.container {
  @include clearfix();
}