/*------------------------------------*\
    $MIXINS
\*------------------------------------*/

/* CSS Transition
	Usage: @include transition(width,0.3s,ease-out);
 */
@mixin transition($transition-property, $transition-time, $method) {
  -webkit-transition: $transition-property $transition-time $method;
  -moz-transition: $transition-property $transition-time $method;
  -ms-transition: $transition-property $transition-time $method;
  -o-transition: $transition-property $transition-time $method;
  transition: $transition-property $transition-time $method;
}

/* Rem Unit font sizes with relative fallback http:/seesparkbox.com/foundry/scss_rem_mixin_now_with_a_better_fallback  
	Usage: @include font-size(1, large);
*/
@mixin font-size( $decimal-size, $keyword: null ) {
  @if $keyword{ font-size: $keyword; }
  @else { font-size: $decimal-size * $base-font-multiplier * 16px;}
  font-size: $decimal-size * 1rem;
}

//Use clearfix class on parent to clear nested columns,
//or wrap each row of columns in a <div class="row">
@mixin clearfix {
  &:after, &:before {
    display: block;
    visibility: hidden;
    overflow: hidden;
    width: 0;
    height: 0;
    content: '\0020';
  }
  &:after {
    clear: both;
  }
  & {
    zoom: 1;
  }
}

.clearfix,
.clearfixiest {
  @include clearfix;
}
.clear {
  display: block;
  visibility: hidden;
  clear: both;
  overflow: hidden;
  width: 0;
  height: 0;
}


//px to em
@function em($target, $context: $base-font-size) {
  @if $target == 0 { @return 0 }
  @return $target / $context + 0em;
}

@mixin rf-font-face (
$font-family,
$file,
$short-name: null,
$serif: sans,
$fall-back: null
) { @font-face {
  font-family: $font-family;
  src: url('../fonts/#{$file}.eot');
  src: url('../fonts/#{$file}.eot?#iefix'),
  url('../fonts/#{$file}.woff'),
  url('../fonts/#{$file}.ttf'),
  url('../fonts/#{$file}.svg##{$font-family}');
}

  @if $short-name != null and $fall-back != null {
    .#{$short-name} {
      @if $serif == sans {
        font-family: '#{$font-family}', '#{$fall-back}', Arial, sans-serif;
      } @if $serif == serif {
      font-family: '#{$font-family}','#{$fall-back}', Georgia, serif;
    }
    }
  }


  @if $short-name != null and $fall-back == null {
    .#{$short-name} {
      @if $serif == sans {
        font-family: '#{$font-family}', Arial, sans-serif;
      } @if $serif == serif {
      font-family: '#{$font-family}', Georgia, serif;
    }
    }
  }
}

@mixin rf-retina() {
  @media (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    @content;
  }
}

@mixin rf-break-smaller ($break-point) {
  @media only screen and (max-width: $break-point) {
    @content;
  }
}

@mixin rf-mid-breaker ($break-point1, $break-point2) {
  @media only screen and (min-width: $break-point1) and (max-width: $break-point2) {
    @content;
  }
}

@mixin rf-break-larger($break-point) {
  @media only screen and (min-width: $break-point) {
    @content;
  }
}

@mixin input-placeholder {
  &.placeholder { @content; }
  &:-moz-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &:-ms-input-placeholder { @content; }
  &::-webkit-input-placeholder { @content; }
}

